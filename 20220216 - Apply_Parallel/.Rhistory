knitr::opts_chunk$set(echo = TRUE)
# Create two vectors of different lengths
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
# Put these vectors into an array of two 3x3 matrices.
result <- array(c(vector1,vector2),dim = c(3,3,2))
print(result)
# Reference the 3rd column in matrix 2
result[,3,2]
# Code
random_data <- rnorm(100000)
arr <- array(random_data, dim = c(20, 5, 1000))
head(arr)
# Remove the eval=FALSE header from this code block before continuing
Beta <- matrix(c(1,2,0,4,0), ncol=1)
X<-matrix(rnorm(100), ncol=5, nrow=20)
X[1,]
Beta
X%*%Beta # No noise has been included yet
y <- X%*%Beta # No noise has been included yet
head(y)
dim(y)
y <- X%*%Beta + rnorm(length(Beta)) # No noise has been included yet
View(y)
typeof(y)
X%*%Beta # No noise has been included yet
y <- apply(arr, 3, function(X) X%*%Beta + runif(min = -1, max = 1))
y <- apply(arr, 3, function(X) X%*%Beta + rnorm(n = 20))
View(y)
# Code
reg <- apply(Y, 2, function(Y) lm(Y ~ X))
# Code
reg <- apply(y, 2, function(y) lm(y ~ X))
View(reg)
reg
reg$coef
reg[[1]]$coefficients
# Code
reg <- lapply(y, 2, function(y) lm(y ~ X))
# Code
reg <- apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
})
View(reg)
head(reg)
# Code
plot(x = reg[1])
# Code
plot(x = reg[[1])
# Code
plot(x = reg[[1]])
# Code
apply(reg, 1, hist)
# Code
apply(reg, 1, hist(main = "main"))
# Code
apply(reg, 1, plot(density(x)))
# Code
apply(reg, 1, function(x) plot(density(x)))
# Code
reg <- apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
})
# Code
reg <- apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
})
# Code
reg <- apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
})
# Code
Sys.time(reg)
# no parallel
system.time(apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
}))
library(foreach)
install.packages("doMC")
library(doMC)
registerDoMC(cores = 10)
system.time(apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
}),
parallel = TRUE)
# no parallel
system.time(apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
}))
# no parallel
time1 <- system.time(apply(y, 2, function(y){
reg_each <- lm(y ~ X)
reg_each_coef <- reg_each$coefficients
}))
time1[3]
