library(devtools)
##### DIRECTORY #####
setwd("easyEBMA")
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022/Problem Set 6")
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
document(current.code)
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
document(current.code)
help(em_z_hat)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
int rows = x.nrow();
NumericMatrix dNormal(x.nrow(), x.ncol());
NumericMatrix out(x.nrow(), x.col())
// Calculate the dnorm() for each value in our matrix
for (int i = 0; i<x.nrow(); i++)
{
for (int j = 0; j<x.ncol(); j++)
{
double datNumber = R::dnorm(y[i], x(i,j), sd, FALSE);
dNormal(i,j) = datNumber; //
}
}
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
document(current.code)
help(em_z_hat)
??em_z_hat
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("easyEBMA")
load_all(current.code)
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV TESTING #####
current.code <- as.package("ps6_EBMA")
load_all(current.code)
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV TESTING #####
current.code <- as.package("ps6_EBMA")
load_all(current.code)
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV TESTING #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV TESTING #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
##### DEV TESTING #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
install.packages("EBMAforecast")
##### TESTING USING `EBMAforecast` PACKAGE #####
df <- presidentialForecast
##### TESTING USING `EBMAforecast` PACKAGE #####
library(EBMAforecast)
df <- presidentialForecast
View(df)
dat <- presidentialForecast
?z_hat
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
##### TESTING USING `EBMAforecast` PACKAGE #####
library(EBMAforecast)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
library(devtools)
library(roxygen2)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
##### TESTING USING `EBMAforecast` PACKAGE #####
library(EBMAforecast)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
z_hat(x = x, y = y, weights = my_weights, sd = 1)
?z_hat
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
library(ps6EBMA)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
ps6EBMA::z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
##### TESTING USING `EBMAforecast` PACKAGE #####
library(EBMAforecast)
library(ps6EBMA)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
ps6EBMA::z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
z_hat(x = x, y = y, weights = my_weights, sd = 1)
library(devtools)
library(roxygen2)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
ps6EBMA::z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
library(Rcpp)
# Testing z_hat with x, y, weights from the presidentialForecast data
sourceCpp("z_hat.cpp")
# Testing z_hat with x, y, weights from the presidentialForecast data
sourceCpp("ps6EBMA/src/z_hat.cpp")
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
##### TESTING USING `EBMAforecast` PACKAGE #####
library(EBMAforecast)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
library(devtools)
library(roxygen2)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
##### TESTING USING `EBMAforecast` PACKAGE #####
library(EBMAforecast)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
my_z_hat
# Testing w_hat
my_w_hat <- w_hat(my_z_hat)
help(z_hat)
# Testing w_hat
help(w_hat)
my_w_hat <- w_hat(my_z_hat)
my_w_hat
# And the full EM algorithm
help(fullEM)
my_fullEM <- fullEM(x = x,
y = y,
weights = my_weights,
sd = 1,
tolerance = 0.00005)
my_fullEM
##### LIBRARIES #####
library(devtools)
library(roxygen2)
##### DEV STUFF #####
current.code <- as.package("ps6EBMA")
load_all(current.code)
document(current.code)
##### TESTING USING `EBMAforecast` PACKAGE #####
library(EBMAforecast)
dat <- presidentialForecast
# Testing z_hat with x, y, weights from the presidentialForecast data
x <- as.matrix(dat[,1:6])
y = dat[,7]
my_weights <- replicate(dim(x)[2], 1/dim(x)[2])
help(z_hat)
my_z_hat <- z_hat(x = x,
y = y,
weights = my_weights,
sd = 1)
my_z_hat
# Testing w_hat
help(w_hat)
my_w_hat <- w_hat(my_z_hat)
my_w_hat
# And the full EM algorithm
help(fullEM)
my_fullEM <- fullEM(x = x,
y = y,
weights = my_weights,
sd = 1,
tolerance = 0.00005)
my_fullEM
