knitr::opts_chunk$set(echo = TRUE)
# Remove eval=FALSE to have this code block run.
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
# dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# Just got it manualy because of connection size issues
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
library(ggplot2)
library(usmap)
# Format the State ID
primaryPolls$full <- primaryPolls$state
statemaps <- us_map(regions = "states")
statemaps$state <- statemaps$full
maps_state <- us_map(regions = "states")
maps_state$fips <- as.numeric(maps_state$fips)
maps_state$fips <- as.factor(maps_state$fips)
state <- inner_join(maps_state, primaryPolls, by = "full")
# Bernie test
test <- ggplot(data = state[state$candidate_name == "Bernard Sanders",])+
geom_polygon(aes(x = x, y = y, group = group,
fill = pct),
color = "grey")+
geom_polygon(data = maps_state,
aes(x = x, y = y, group = group),
fill = NA,
col = "black") +
theme_minimal()
test
# Remove eval=FALSE to have this code block run.
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
# dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# Just got it manualy because of connection size issues
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
library(ggplot2)
library(usmap)
# Setting it up the mapping
primaryPolls$full <- primaryPolls$state
statemaps <- us_map(regions = "states")
statemaps$state <- statemaps$full
maps_state <- us_map(regions = "states")
maps_state$fips <- as.numeric(maps_state$fips)
maps_state$fips <- as.factor(maps_state$fips)
dat <- inner_join(maps_state, primaryPolls, by = "full")
# Bernie test
test <- ggplot(data = dat[dat$candidate_name == "Bernard Sanders",])+
geom_polygon(aes(x = x, y = y, group = group,
fill = pct),
color = "grey")+
geom_polygon(data = maps_state,
aes(x = x, y = y, group = group),
fill = NA,
col = "black") +
theme_minimal()
test
knitr::opts_chunk$set(echo = TRUE)
# Remove eval=FALSE to have this code block run.
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
# dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# Just got it manualy because of connection size issues
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
# Here's our libraries, which includes my preferred mapping library
library(ggplot2)
library(usmap)
# Setting up the mapping
primaryPolls$full <- primaryPolls$state
statemaps <- us_map(regions = "states")
statemaps$state <- statemaps$full
maps_state <- us_map(regions = "states")
maps_state$fips <- as.numeric(maps_state$fips)
maps_state$fips <- as.factor(maps_state$fips)
dat <- inner_join(maps_state, primaryPolls, by = "full")
# Our list of candidates
candidates <- unique(dat$candidate_name)
candidate_ids <- unique(dat$candidate_id)
candidate_list <- cbind("Candidate" = candidates,
"ID" = candidate_ids[1:60])
# A for-loop (this might be inefficient) that
# creates a map of the U.S., where the fill color
# is the `pct` variable. It's not clear which specific
# date is associated with each fill (and not every state
# has data on every date), but the prompt doesn't say
# I have to be a particularly competent analyst
# Note: not every candidate is on every poll in every state
mapmaker <- function(candidate_list){
for (i in candidate_list[,2]) {
subdat <- dat[dat$candidate_id == i,]
print(subdat$candidate_name[1])
map <<- ggplot(data = subdat)+
geom_polygon(aes(x = x, y = y, group = group,
fill = pct),
color = "grey")+
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66)) +
geom_polygon(data = maps_state,
aes(x = x, y = y, group = group),
fill = NA,
col = "black") +
labs(title = paste("Support for", subdat$candidate_name),
caption = paste("Source:", 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'),
subtitle = "White means that candidate is not on the polls in that state (because reasons)",
x = NA) +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(map)
ggsave(filename = paste0("supportplot_", subdat$candidate_name[1], ".png"),
plot = map)
}
}
mapmaker(candidate_list)
load.image("support_Amy Klobuchar.png")
# Getting the images into the RMarkdown file
library(png)
readPNG("support_Amy Klobuchar.png")
a <- readPNG("support_Amy Klobuchar.png")
readPNG("supportplot_Amy Klobuchar.png")
a <- readPNG("supportplot_Amy Klobuchar.png")
a
view(a)
!("supportplot_Amy Klobuchar.png")
!("./supportplot_Amy Klobuchar.png")
!["text"]("./supportplot_Amy Klobuchar.png")
# Note: not every candidate is on every poll in every state
mapmaker <- function(candidate_list){
for (i in candidate_list[,2]) {
subdat <- dat[dat$candidate_id == i,]
print(subdat$candidate_name[1])
map <<- ggplot(data = subdat)+
geom_polygon(aes(x = x, y = y, group = group,
fill = pct),
color = "grey")+
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66)) +
geom_polygon(data = maps_state,
aes(x = x, y = y, group = group),
fill = NA,
col = "black") +
labs(title = paste("Support for", subdat$candidate_name),
caption = paste("Source:", 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'),
subtitle = "White means that candidate is not on the polls in that state (because reasons)",
x = NA) +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(map)
ggsave(filename = paste0("./Maps/supportplot_", subdat$candidate_name[1], ".png"),
plot = map)
}
}
mapmaker(candidate_list)
![Alt text]("./Maps/supportplot_Amy Klobuchar.png")
