group_by(candidate_name, state) %>%
summarise(pct)
View(dat)
dat$state[1]
# Your commented solution goes here.
dat <- primaryPolls %>%
filter(state != "") %>%
group_by(candidate_name, state) %>%
summarise(pct)
# Your commented solution goes here.
dat <- primaryPolls %>%
filter(state != "") %>%
group_by(candidate_name, state) %>%
summarise(pct)
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state) %>%
filter(state != "") %>%
summarise(pct)
View(dat)
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state) %>%
filter(state != "") %>%
summarise(mean = mean(pct))
View(dat)
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state) %>%
filter(state != "") %>%
summarise(mean_pct = mean(pct))
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state) %>%
filter(state != "") %>%
summarise(mean_pct = mean(pct)) %>%
filter(mean_pct > 0)
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>%
filter(state != "") %>%
summarise(mean_pct = mean(pct)) %>%
filter(mean_pct > 0)
head(dat)
# Remove eval=FALSE to have this code block run.
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
#dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# NOTE: doing this locally
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>% # grouping by candidate, state, and party
filter(state != "") %>% # dropping observations without a state
summarise(mean_pct = mean(pct)) %>% # outputting the mean pct for each candidate, by state
filter(mean_pct > 0) # getting rid of observations with percents = 0
head(dat)
View(dat)
object.size(primaryPolls)
object.size(dat)
object.size(dat) / object.size(primaryPolls)
object.size(dat) -  object.size(primaryPolls)
# Remove eval=FALSE to have this code block run.
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
#dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# NOTE: doing this locally
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>% # grouping by candidate, state, and party
filter(state != "") %>% # dropping observations without a state
summarise(mean_pct = mean(pct)) %>% # outputting the mean pct for each candidate, by state
filter(mean_pct > 0) # getting rid of observations with percents = 0
head(dat)
object.size(dat)
object.size(primaryPolls)
# Remove eval=FALSE to have this code block run.
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
#dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# NOTE: doing this locally
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>% # grouping by candidate, state, and party
filter(state != "") %>% # dropping observations without a state
summarise(mean_pct = mean(pct)) %>% # outputting the mean pct for each candidate, by state
filter(mean_pct > 0) # getting rid of observations with percents = 0
head(dat)
object.size(dat)
object.size(primaryPolls)
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>% # grouping by candidate, state, and party
filter(state != "") %>% # dropping observations without a state
summarise(mean_pct = mean(pct)) %>% # outputting the mean pct for each candidate, by state
filter(mean_pct > 10) # getting rid of observations with percents = 0
head(dat)
object.size(dat)
object.size(primaryPolls)
View(dat)
library(usmap)
states <- usmap(regions = "state")
states <- us_map(regions = "state")
statemaps <- us_map(regions = "state")
statemap$state <- statemap$full
statemaps$state <- statemap$full
statemaps <- us_map(regions = "state")
statemaps$state <- statemap$full
statemaps$state <- statemaps$full
states <- inner_join(statemaps, dat, by = "state")
View(states)
library(ggplot2)
map <- ggplot(data = states, aes(x = x, y = y, group = group))+
geom_polygon()
map
map <- ggplot(data = states, aes(x = x, y = y, group = group))+
geom_polygon(fill = mean_pct)
map <- ggplot(data = states, aes(x = x, y = y, group = group),
fill = mean_pct)+
geom_polygon()
map
map <- ggplot() +
geom_polygon(data = states,
aes(x = x, y = y, group = group, fill = pct))
map
map <- ggplot() +
geom_polygon(data = states,
aes(x = x, y = y, group = group, fill = mean_pct))
map
map <- ggplot() +
geom_polygon(data = states,
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66)) +
map
map <- ggplot() +
geom_polygon(data = states,
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66))
map
map <- ggplot() +
geom_polygon(data = states,
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group, fill = NA, col = "black"))
map
map <- ggplot() +
geom_polygon(data = states,
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black")
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Amy Klobuchar",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black")
map
# Remove eval=FALSE to have this code block run.
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
#dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# NOTE: doing this locally
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>% # grouping by candidate, state, and party
filter(state != "") %>% # dropping observations without a state
summarise(mean_pct = mean(pct)) %>% # outputting the mean pct for each candidate, by state
filter(mean_pct > 0) # getting rid of observations with percents = 0
head(dat)
object.size(dat)
object.size(primaryPolls)
library(usmap)
statemaps <- us_map(regions = "state")
statemaps$state <- statemaps$full
states <- inner_join(statemaps, dat, by = "state")
library(ggplot2)
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Amy Klobuchar",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black")
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Amy Klobuchar",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Amy Klobuchar",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Joseph R. Biden Jr.",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
View(primaryPolls)
# Your commented solution goes here.
max(primaryPolls$start_date)
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>%
group_by(start_date, pct, state, candidate_name) %>%
mutate(in_favor = pct/100) %>%
summarise(median_support = median(in_favor))
View(newData)
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(start_date, pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor))
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(start_date, pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor)) %>%
top_n(median_support, 10)
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(start_date, pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor))
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(start_date, pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor)) %>%
top_n(median_support, n = 10)
top_n(median_support, n = 10)
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(start_date, pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor)) %>%
filter(top_n(median_support, n = 10))
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor)) %>%
filter(top_n(median_support, n = 10))
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor)) %>%
top_n(median_support, n = 10)
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Joseph R. Biden Jr.",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Donald Trum[",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Donald Trump",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Donald J. Trump",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
View(states)
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Donald Trump",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Donald Trump",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light red", high = "dark red", limits = c(0,93))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Donald Trump",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "pink", high = "dark red", limits = c(0,93))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Donald Trump",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "pink", high = "dark red", limits = c(0,93))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Joseph R. Biden Jr.",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "pink", high = "dark red", limits = c(0,93))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Joseph R. Biden Jr.",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,66))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
View(dat)
map <- ggplot() +
geom_polygon(data = states[states$candidate_name == "Joseph R. Biden Jr.",],
aes(x = x, y = y, group = group, fill = mean_pct)) +
labs(fill = "Percent Support") +
scale_fill_continuous(low = "light blue", high = "dark blue", limits = c(0,100))+
geom_polygon(data = statemaps, aes(x = x, y = y, group = group),
fill = NA, col = "black") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
map
knitr::opts_chunk$set(echo = TRUE)
# Load library dependencies
library(dplyr)
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
#dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# NOTE: doing this locally
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
# Your commented solution goes here.
max(primaryPolls$start_date)
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor)) %>%
top_n(median_support, n = 10)
View(newData)
# Stuff I was doing on the side -- this also completes the second half of the assignment (after class)
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>% # grouping by candidate, state, and party
filter(state != "") %>% # dropping observations without a state
summarise(mean_pct = mean(pct)) %>% # outputting the mean pct for each candidate, by state
filter(mean_pct > 0) # getting rid of observations with percents = 0
View(dat)
primaryPolls2 <- primaryPolls %>%
filter(candidate_name %in% c(“Bernard Sanders”, “Elizabeth Warren”, “Joseph R. Biden Jr.“,”Amy Klobuchar”, “Donald Trump”, “Jeb Bush”, “Paul Ryan”, “Ted Cruz”, “John Richard Kasich”, “Pete Buttigieg”)) %>%
primaryPolls2 <- primaryPolls %>%
filter(candidate_name %in% c(“Bernard Sanders”, “Elizabeth Warren”, “Joseph R. Biden Jr.“,”Amy Klobuchar”, “Donald Trump”, “Jeb Bush”, “Paul Ryan”, “Ted Cruz”, “John Richard Kasich”, “Pete Buttigieg”)) %>%
primaryPolls2 <- primaryPolls %>%
# filter(candidate_name %in% c(“Bernard Sanders”, “Elizabeth Warren”, “Joseph R. Biden Jr.“,”Amy Klobuchar”, “Donald Trump”, “Jeb Bush”, “Paul Ryan”, “Ted Cruz”, “John Richard Kasich”, “Pete Buttigieg”)) %>%
select(candidate_name, state, sample_size, pct, start_date, pollster, party)
View(primaryPolls2)
widePolls <- primaryPolls2 %>%
pivot_wider(names_from = pollster, values_from = pct)
View(widePolls)
# Define path to the data
#dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
# NOTE: doing this locally
primaryPolls <- read.csv("president_primary_polls_feb2020.csv")
# Your commented solution goes here.
max(primaryPolls$start_date)
# The in-class stuff
newData <- primaryPolls %>%
filter(start_date > "2019-12-08") %>% # the last two months
group_by(pct, state, candidate_name) %>% # our selection of things we care about
mutate(in_favor = pct/100) %>% # the proportion of supporters
summarise(median_support = median(in_favor)) %>%
top_n(median_support, n = 10)
# Stuff I was doing on the side -- this also completes the second half of the assignment (after class)
dat <- primaryPolls %>%
group_by(candidate_name, state, party) %>% # grouping by candidate, state, and party
filter(state != "") %>% # dropping observations without a state
summarise(mean_pct = mean(pct)) %>% # outputting the mean pct for each candidate, by state
filter(mean_pct > 0) # getting rid of observations with percents = 0
head(dat)
object.size(dat)
object.size(primaryPolls)
