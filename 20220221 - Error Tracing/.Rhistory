knitr::opts_chunk$set(echo = TRUE)
# Remove eval=FALSE from this code block to have it run.
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j]
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
gramschmidt(2)
gramschmidt(c(2:10))
gramschmidt(c(2:10, 12:20))
c(2:10, 12:20)
gramschmidt(cbind(2:10, 12:20))
testdata <- as.matrix(1, 2, 4)
testdata <- as.matrix(rnorm(25), nrow = 25)
View(testdata)
testdata <- as.matrix(rnorm(n = 25), nrow = 25)
View(testdata)
set.seed(666)
testdata <- matrix(rnorm(n = 25), nrow = 25)
View(testdata)
testdata <- matrix(rnorm(n = 5), nrow = 25)
testdata <- matrix(rnorm(5), nrow = 25)
set.seed(666)
testdata <- matrix(rnorm(5), nrow = 25)
testdata <- matrix(rnorm(5), ncol = 25)
testdata <- matrix(rnorm(5), ncol = 25, nrow = 25)
View(testdata)
M1<-matrix(rnorm(36),nrow=6)
testdata <- matrix(rnorm(25), nrow = 5)
View(testdata)
qa(testdata)
qr(testdata)
# Remove eval=FALSE from this code block to have it run.
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j]
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
set.seed(666)
testdata <- matrix(rnorm(25), nrow = 5)
qr(testdata)
gramschmidt(testdata)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j]
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
x <- testdta
x <- testdata
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
j <- 1
v = x[,j]
View(testdata)
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[i,j] <- t(Q[,i]) %*% x[,j]
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
View(Q)
v = x[,j] #jth column
R[i,j] <- t(Q[,i]) %*% x[,j]
View(testdata)
View(R)
R[i,j] <- t(x[,i]) %*% x[,j]
View(R)
R[i,j] <- t(x[,i]) %*% x[,j]
View(R)
R[i,j] <- t(v[,i]) %*% x[,j]
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Debugging Bobby's stuff
gramschmidt(testdata)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v[j] / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Debugging Bobby's stuff
gramschmidt(testdata)
qr(testdata)
# Making test data and testing it
set.seed(666)
testdata <- matrix(rnorm(25), nrow = 5)
qr(testdata)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v[j] / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Debugging Bobby's stuff
gramschmidt(testdata)
