n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
j <- 1
v = x[,j]
View(testdata)
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[i,j] <- t(Q[,i]) %*% x[,j]
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
View(Q)
v = x[,j] #jth column
R[i,j] <- t(Q[,i]) %*% x[,j]
View(testdata)
View(R)
R[i,j] <- t(x[,i]) %*% x[,j]
View(R)
R[i,j] <- t(x[,i]) %*% x[,j]
View(R)
R[i,j] <- t(v[,i]) %*% x[,j]
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Debugging Bobby's stuff
gramschmidt(testdata)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v[j] / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Debugging Bobby's stuff
gramschmidt(testdata)
qr(testdata)
# Making test data and testing it
set.seed(666)
testdata <- matrix(rnorm(25), nrow = 5)
qr(testdata)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v[j] / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Debugging Bobby's stuff
gramschmidt(testdata)
knitr::opts_chunk$set(echo = TRUE)
# Remove eval=FALSE from this code block to have it run.
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j]
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Making test data and testing it
set.seed(666)
testdata <- matrix(rnorm(25), nrow = 5)
qr(testdata)
# Debugging Bobby's stuff
gramschmidt(testdata)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v[j] / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
# Debugging Bobby's stuff
gramschmidt(testdata)
x <- testdata
j <- 1
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
for (j in 1:n-1) {
v = x[,j] #jth column
if (j >= 1) {
for (i in 1:j) {
R[i,j] <- t(x[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v[j] / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
x <- testdata
# Debugging Bobby's stuff
gramschmidt(testdata)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process Change 'n- 1'to 'n'from line 83, so that the loop
# for v starts at 1
for (j in 1:n) {
v = x[, j]
# Change from j>=1 to j>1 from line 86, so that the loops for R and Q
# start at 2
if (j > 1) {
for (i in 1:j) {
R[i, j] <- t(Q[, i]) %*% x[, j]
v <- v - R[i, j] * Q[, i]
print
}
}
R[j, j] <- sqrt(sum(vˆ2))
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process Change 'n- 1'to 'n'from line 83, so that the loop
# for v starts at 1
for (j in 1:n) {
v = x[, j]
# Change from j>=1 to j>1 from line 86, so that the loops for R and Q
# start at 2
if (j > 1) {
for (i in 1:j) {
R[i, j] <- t(Q[, i]) %*% x[, j]
v <- v - R[i, j] * Q[, i]
print
}
}
R[j, j] <- sqrt(sum(vˆ2))
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process Change 'n- 1'to 'n'from line 83, so that the loop
# for v starts at 1
for (j in 1:n) {
v = x[, j]
# Change from j>=1 to j>1 from line 86, so that the loops for R and Q
# start at 2
if (j > 1) {
for (i in 1:j) {
R[i, j] <- t(Q[, i]) %*% x[, j]
v <- v - R[i, j] * Q[, i]
print
}
R[j, j] <- sqrt(sum(vˆ2))
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process Change 'n- 1'to 'n'from line 83, so that the loop
# for v starts at 1
for (j in 1:n) {
v = x[, j]
# Change from j>=1 to j>1 from line 86, so that the loops for R and Q
# start at 2
if (j > 1) {
for (i in 1:j) {
R[i, j] <- t(Q[, i]) %*% x[, j]
v <- v - R[i, j] * Q[, i]
print
}
}
R[j, j] <- sqrt(sum(vˆ2))
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
A <- matrix(c(1, 1, 0, 1, 0, 1, 0, 1, 1), nrow = 3, byrow = TRUE)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
#Change  "n- 1" to "n" from line 83, so that the loop for v starts at 1
for (j in 1:n) {
v = x[,j]
#Change from j>=1 to j>1 from line 86, so that the loops for R and Q start at 2
if (j > 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
print
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
gramschmidt(A)
#Changing line 82 by itslef allows the function to work correctly on  matrix A
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
#Change  "n- 1" to "n" from line 83, so that the loop for v starts at 1
for (j in 1:n) {
v = x[,j]
#Change from j>=1 to j>1 from line 86, so that the loops for R and Q start at 2
if (j > 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
print
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
gramschmidt(A)
A <- matrix(c(1, 1, 0, 1, 0, 1, 0, 1, 1), nrow = 3, byrow = TRUE)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <<- matrix(0, m, n)
R <<- matrix(0, n, n)
# Gram-Schmidt process
#Change  "n- 1" to "n" from line 83, so that the loop for v starts at 1
for (j in 1:n) {
v = x[,j]
#Change from j>=1 to j>1 from line 86, so that the loops for R and Q start at 2
if (j > 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
print
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
gramschmidt(A)
t(Q) %*% Q
Q %*% t(Q)
A <- matrix(c(1, 1, 0, 1, 0, 1, 0, 1, 1), nrow = 3, byrow = TRUE)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
#Change  "n- 1" to "n" from line 83, so that the loop for v starts at 1
for (j in 1:n) {
v = x[,j]
#Change from j>=1 to j>1 from line 86, so that the loops for R and Q start at 2
if (j > 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
print
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
gramschmidt(A)
#Changing line 82 by itslef allows the function to work correctly on  matrix A
Q %*% t(Q)
A <- matrix(c(1, 1, 0, 1, 0, 1, 0, 1, 1), nrow = 3, byrow = TRUE)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
#Change  "n- 1" to "n" from line 83, so that the loop for v starts at 1
for (j in 1:n) {
v = x[,j]
#Change from j>=1 to j>1 from line 86, so that the loops for R and Q start at 2
if (j > 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
print
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
Q <<- Q
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
gramschmidt(A)
Q %*% t(Q)
gramschmidt(A)
Q %*% t(Q)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
#Change  "n- 1" to "n" from line 83, so that the loop for v starts at 1
for (j in 1:n) {
v = x[,j]
#Change from j>=1 to j>1 from line 86, so that the loops for R and Q start at 2
if (j > 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
print
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
Q <<- Q
R <<- R
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
A
Q %*% R
gramschmidt(A)
Q %*% R
A
Q %*% R
A <- matrix(c(1, 1, 0, 1, 0, 1, 0, 1, 1), nrow = 3, byrow = TRUE)
gramschmidt <- function(x) {
# Get the number of rows and columns of the matrix
n <- ncol(x)
m <- nrow(x)
# Initialize matrices Q and R
Q <- matrix(0, m, n)
R <- matrix(0, n, n)
# Gram-Schmidt process
#Change  "n- 1" to "n" from line 83, so that the loop for v starts at 1
for (j in 1:n) {
v = x[,j]
#Change from j>=1 to j>1 from line 86, so that the loops for R and Q start at 2
if (j > 1) {
for (i in 1:j) {
R[i,j] <- t(Q[,i]) %*% x[,j]
v <- v - R[i,j] * Q[,i]
print
}
}
R[j,j] <- sqrt(sum(v^2))
Q[,j] <- v / R[j,j]
}
Q <<- Q
R <<- R
# Return matrices Q and R in a list
QRdecomp <- list('Q'=Q, 'R'=R)
return(QRdecomp)
}
gramschmidt(A)
#Changing line 82 by itslef allows the function to work correctly on  matrix A
Q %*% t(Q)
A
Q %*% R
set.seed(666)
testdata <- matrix(rnorm(25), nrow = 5)
gramschmidt(testdata)
Q %*% t(Q)
Q %*% R
Q %*% R - testdata
