#' @aliases Squares-class initialize,Squares-method getSquares,Squares-method
#' @rdname Squares
#' @export
setClass(Class="Squares",
representation = representation(
square = "numeric",
x = "numeric",
y = "numeric"
),
prototype = prototype(
square = c(),
x = c(),
y = c()
)
)
#' @export
setMethod("initialize", "Squares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @rdname Squares
#' @export
setGeneric("getSquares",
function(object="Squares")  {
standardGeneric("getSquares")
}
)
#' @export
setMethod("getSquares", "Squares",
function(object){
return(object@square)
}
)
setValidity("Squares", function(object){
added<-object@x^2+object@y^2
subtracted<-object@x^2-object@y^2
test1<-all(object@square==added)
test2<-all(object@square==subtracted)
object@square!=added
if(!test1 & !test2){return("@square is not a valid value")}
}
)
#' @export
setMethod("initialize", "Squares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @rdname Squares
#' @export
setGeneric("getSquares",
function(object="Squares")  {
standardGeneric("getSquares")
}
)
#' @export
setMethod("getSquares", "Squares",
function(object){
return(object@square)
}
)
#' @note This is a very simple function
#' @examples
#'
#' myX <- c(20, 3)
#' myY <- c(-2, 4.1)
#' addSquares(myX, myY)
#' @seealso \code{\link{subtractSquares}}
#' @rdname addSquares
#' @aliases addSquares,ANY-method
#' @export
setGeneric(name="addSquares",
def=function(x, y, ...)
{standardGeneric("addSquares")}
)
#' @export
setMethod(f="addSquares",
definition=function(x, y, ...){
return(new("Squares", square=(x^2 + y^2), x = x, y = y))
}
)
mysquare <- addSquares(x = 2, y = 2, square = 8)
View(mysquare)
mysquare2 <- addSquares(x = 2, y = 2, square = "plus")
#' \itemize{
#' \item \code{square} The added or subtracted squared values
#' \item \code{x} The first input
#' \item \code{y} the second input
#' }
#'
#' @author Jacob M. Montgomery: \email{jacob.montgomery@@wustl.edu}
#' @aliases Squares-class initialize,Squares-method getSquares,Squares-method
#' @rdname Squares
#' @export
setClass(Class="Squares",
representation = representation(
square = "numeric",
x = "numeric",
y = "numeric"
),
prototype = prototype(
square = c(),
x = c(),
y = c()
)
)
setValidity("Squares", function(object){
added<-object@x^2+object@y^2
subtracted<-object@x^2-object@y^2
test1<-all(object@square==added)
test2<-all(object@square==subtracted)
object@square!=added
if(!test1 & !test2){return("@square is not a valid value")}
}
)
#' @export
setMethod("initialize", "Squares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @rdname Squares
#' @export
setGeneric("getSquares",
function(object="Squares")  {
standardGeneric("getSquares")
}
)
#' @export
setMethod("getSquares", "Squares",
function(object){
return(object@square)
}
)
mysquare2 <- addSquares(x = 2, y = 2, square = "plus")
dx <- 1:2
dy <- 3:4
addSquares(dx, dy)
dx <- 2
dy <- 3:4
addSquares(dx, dy)
#' Adding squared values
#'
#' Finds the sum of squared numbers
#'
#' @param x A numeric object
#' @param y A numeric object with the same dimensionality as \code{x}.
#'
#' @return An object of class Squares containing
#'  \item{squares}{The sum of the squared values}
#'  \item{x}{The first object input}
#'  \item{y}{The second object input}
#' @author Jacob M. Montgomery
#' @note This is a very simple function
#' @examples
#'
#' myX <- c(20, 3)
#' myY <- c(-2, 4.1)
#' addSquares(myX, myY)
#' @seealso \code{\link{subtractSquares}}
#' @rdname addSquares
#' @aliases addSquares,ANY-method
#' @export
setGeneric(name="addSquares",
def=function(x, y, ...)
{standardGeneric("addSquares")}
)
#' @export
setMethod(f="addSquares",
definition=function(x, y, ...){
return(new("Squares", square=(x^2 + y^2), x = x, y = y))
}
)
#' A squared value object
#'
#' Object of class \code{SquaresPack} are created by the \code{addSquares} and \code{subtractSquares} functions
#'
#'
#' An object of the class `SquaresPack' has the following slots:
#' \itemize{
#' \item \code{square} The added or subtracted squared values
#' \item \code{x} The first input
#' \item \code{y} the second input
#' }
#'
#' @author Jacob M. Montgomery: \email{jacob.montgomery@@wustl.edu}
#' @aliases Squares-class initialize,Squares-method getSquares,Squares-method
#' @rdname Squares
#' @export
setClass(Class="Squares",
representation = representation(
square = "numeric",
x = "numeric",
y = "numeric"
),
prototype = prototype(
square = c(),
x = c(),
y = c()
)
)
#' @export
setMethod("initialize", "Squares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @rdname Squares
#' @export
setGeneric("getSquares",
function(object="Squares")  {
standardGeneric("getSquares")
}
)
#' @export
setMethod("getSquares", "Squares",
function(object){
return(object@square)
}
)
#' Subtracting squared values
#'
#' Finds the difference of squared numbers
#'
#' @param x A numeric object
#' @param y A numeric object with the same dimensionality as \code{x}.
#'
#' @return A list with the elements
#'  \item{squares}{The difference of the squared values}
#'  \item{x}{The first object input}
#'  \item{y}{The second object input}
#' @author Ryan T. Moore
#' @note This is a very simple function
#' @examples
#'
#' myX <- c(20, 3)
#' myY <- c(-2, 4.1)
#' subtractSquares(myX, myY)
#' @seealso \code{\link{addSquares}}
#' @rdname subtractSquares
#' @aliases subtractSquares,ANY-method
#' @export
setGeneric(name="subtractSquares",
def=function(x, y, ...)
{standardGeneric("subtractSquares")}
)
#' @export
setMethod(f="subtractSquares",
definition=function(x, y, ...){
return(new("Squares", square=(x^2 - y^2), x = x, y = y))
}
)
#' A squared value object
#'
#' Object of class \code{AllSquares} as created by the \code{allSquares} functions
#'
#'
#' An object of the class `Squares' has the following slots:
#' \itemize{
#' \item \code{addSquare} The added or subtracted squared values
#' \item \code{subtractSquare} The added or subtracted squared values
#' \item \code{x} The first input
#' \item \code{y} the second input
#' }
#'
#' @author Jacob M. Montgomery: \email{jacob.montgomery@@wustl.edu}
#' @aliases AllSquares-class initialize,AllSquares-method getSquares,AllSquares-method
#' @rdname Squares
#' @export
setClass(Class="AllSquares",
contains="Squares",
representation = representation(
addSquare = "numeric",
subtractSquare = "numeric"
),
prototype = prototype(
addSquare = numeric(),
subtractSquare=numeric(),
x = numeric(),
y = numeric(),
square=numeric()
)
)
#' @export
setMethod("initialize", "AllSquares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @export
setMethod("getSquares", "AllSquares",
function(object){
out <- cbind(object@addSquare, object@subtractSquare)
colnames(out) <- c("Added", "Subtracted")
return(out)
}
)
##
setAs(from="Squares", to="AllSquares",
def=function(from){
new("AllSquares",
x=from@x,
y=from@y,
square=from@square
)
}
)
#' Calculate all squares
#'
#' Calculates both added and subtracted squares
#'
#' @param x A numeric object
#' @param y A numeric object with the same dimensionality as \code{x}.
#'
#' @return An object of class AllSquares containing
#'  \item{addSquares}{The sum of the squared values}
#'  \item{subtractSquares}{The difference of the squared values}
#'  \item{x}{The first object input}
#'  \item{y}{The second object input}
#' @author Jacob M. Montgomery
#' @note This produces an object of a new class
#' @examples
#'
#' myX <- c(20, 3)
#' myY <- c(-2, 4.1)
#' allSquares(myX, myY)
#' @seealso \code{\link{subtractSquares}}, \code{\link{addSquares}}
#' @rdname allSquares
#' @aliases allSquares,ANY-method
#' @export
setGeneric(name="allSquares",
def=function(x, y, ...)
{standardGeneric("allSquares")}
)
#' @export
setMethod(f="allSquares",
definition=function(x, y, ...){
.add <- getSquares(addSquares(x, y))
.subtract <- getSquares(subtractSquares(x, y))
return(new("AllSquares", addSquare=.add, subtractSquare=.subtract, x = x, y = y))
}
)
#' A squared value object
#'
#' Object of class \code{SquaresPack} are created by the \code{addSquares} and \code{subtractSquares} functions
#'
#'
#' An object of the class `SquaresPack' has the following slots:
#' \itemize{
#' \item \code{square} The added or subtracted squared values
#' \item \code{x} The first input
#' \item \code{y} the second input
#' }
#'
#' @author Jacob M. Montgomery: \email{jacob.montgomery@@wustl.edu}
#' @aliases Squares-class initialize,Squares-method getSquares,Squares-method
#' @rdname Squares
#' @export
setClass(Class="Squares",
representation = representation(
square = "numeric",
x = "numeric",
y = "numeric"
),
prototype = prototype(
square = c(),
x = c(),
y = c()
)
)
#' @export
setMethod("initialize", "Squares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @rdname Squares
#' @export
setGeneric("getSquares",
function(object="Squares")  {
standardGeneric("getSquares")
}
)
#' @export
setMethod("getSquares", "Squares",
function(object){
return(object@square)
}
)
#' A squared value object
#'
#' Object of class \code{AllSquares} as created by the \code{allSquares} functions
#'
#'
#' An object of the class `Squares' has the following slots:
#' \itemize{
#' \item \code{addSquare} The added or subtracted squared values
#' \item \code{subtractSquare} The added or subtracted squared values
#' \item \code{x} The first input
#' \item \code{y} the second input
#' }
#'
#' @author Jacob M. Montgomery: \email{jacob.montgomery@@wustl.edu}
#' @aliases AllSquares-class initialize,AllSquares-method getSquares,AllSquares-method
#' @rdname Squares
#' @export
setClass(Class="AllSquares",
contains="Squares",
representation = representation(
addSquare = "numeric",
subtractSquare = "numeric"
),
prototype = prototype(
addSquare = numeric(),
subtractSquare=numeric(),
x = numeric(),
y = numeric(),
square=numeric()
)
)
#' @export
setMethod("initialize", "AllSquares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @export
setMethod("getSquares", "AllSquares",
function(object){
out <- cbind(object@addSquare, object@subtractSquare)
colnames(out) <- c("Added", "Subtracted")
return(out)
}
)
##
setAs(from="Squares", to="AllSquares",
def=function(from){
new("AllSquares",
x=from@x,
y=from@y,
square=from@square
)
}
)
#' A squared value object
#'
#' Object of class \code{AllSquares} as created by the \code{allSquares} functions
#'
#'
#' An object of the class `Squares' has the following slots:
#' \itemize{
#' \item \code{addSquare} The added or subtracted squared values
#' \item \code{subtractSquare} The added or subtracted squared values
#' \item \code{x} The first input
#' \item \code{y} the second input
#' }
#'
#' @author Jacob M. Montgomery: \email{jacob.montgomery@@wustl.edu}
#' @aliases AllSquares-class initialize,AllSquares-method getSquares,AllSquares-method
#' @rdname Squares
#' @export
setClass(Class="AllSquares",
contains="Squares",
representation = representation(
addSquare = "numeric",
subtractSquare = "numeric"
),
prototype = prototype(
addSquare = numeric(),
subtractSquare=numeric(),
x = numeric(),
y = numeric(),
square=numeric()
)
)
#' @export
setMethod("initialize", "AllSquares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @export
setMethod("getSquares", "AllSquares",
function(object){
out <- cbind(object@addSquare, object@subtractSquare)
colnames(out) <- c("Added", "Subtracted")
return(out)
}
)
##
setAs(from="Squares", to="AllSquares",
def=function(from){
new("AllSquares",
x=from@x,
y=from@y,
square=from@square
)
}
)
?getSquares()
myObject <- new("Squares", square = 13, x = 3, y = 2)
View(myObject)
myObject2 <- new("Squares", square = "bleh", x = 3, y = 2)
