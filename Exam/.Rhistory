## Load libraries and set working directory
library(devtools)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
logLik(y, lambda = 5)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
logLik(y, lambda = 5)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
logLik(y, lambda = 5)
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
devtools::document()
devtools::document(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
logLik(y, lambda = 5)
my_mle <- mle(y)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
logLik(y, lambda = my_mle)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
logLik(y, lambda = my_mle)
# Help functions
?mle()
?logLik()
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
logLik(y, lambda = my_mle)
# Help functions
?mle()
?logLik()
# Help functions
?mle()
?logLik()
is.numeric(B) = FALSE
B <- 2
is.numeric(B) = FALSE
is.numeric(B)
!is.numeric(B)
B =< 1
B <= 1
y <- rpois(1000, 10)
# Creating our bootstrap
bootdata <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
}
B <- 1000
# Creating our bootstrap
bootdata <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
}
# Creating our bootstrap
booterrors <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
}
# Creating our bootstrap
booterrors <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
booterrors[i] <- sd(bootdata)
}
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
booterrors[i] <- sd(bootdata)
}
bootStandardError <- mean(booterrors)
# Defining the method
setMethod(f = "standardError",
definition = function(y, SEtype = c("basic", "bootstrap"), B){
if(SEtype == "basic"){
StdE <- sqrt(mle(y) / length(y))
}
else if(SEtype == "bootstrap"){
# Making sure B is actually doable -- i.e., an integer
if(!is.numeric(B)){
stop("B must be a positive integer greater than 1!")
}
if(B <= 1){
stop("B must be a positive integer greater than 1!")
}
# Creating our bootstrap
booterrors <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
booterrors[i] <- sd(bootdata)
}
bootStandardError <- mean(booterrors)
}
else(stop("SEtype must be `basic` or `bootstrap`"))
}
return(bootStandardError)
)
booterrors <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
booterrors[i] <- sd(bootdata)
}
bootStandardError <- mean(booterrors)
return(bootStandardError)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
?standardError()
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
standardError(y, "basic")
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
logLik(y, lambda = my_mle)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap")
mySE_boot <- standardError(y, "bootstrap", B = 100)
mySE_boot <- standardError(y, "bootstrap", B = 10000)
mySE_boot <- standardError(y, "bootstrap", B = 10000)
mySE_boot <- standardError(y, "bootstrap", B = 1000)
## Load libraries and set working directory
library(devtools)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
# Help functions
?mle()
?logLik()
?standardError()
