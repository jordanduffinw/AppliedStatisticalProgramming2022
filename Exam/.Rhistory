if(!is.numeric(B)){
stop("B must be a positive integer greater than 1!")
}
if(B <= 1){
stop("B must be a positive integer greater than 1!")
}
# Creating our bootstrap
booterrors <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
booterrors[i] <- sd(bootdata)
}
bootStandardError <- mean(booterrors)
}
else(stop("SEtype must be `basic` or `bootstrap`"))
}
return(bootStandardError)
)
booterrors <- NULL
for (i in 1:B) {
bootdata <- sample(y, length(y), replace = T)
booterrors[i] <- sd(bootdata)
}
bootStandardError <- mean(booterrors)
return(bootStandardError)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
?standardError()
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
standardError(y, "basic")
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
logLik(y, lambda = my_mle)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap")
mySE_boot <- standardError(y, "bootstrap", B = 100)
mySE_boot <- standardError(y, "bootstrap", B = 10000)
mySE_boot <- standardError(y, "bootstrap", B = 10000)
mySE_boot <- standardError(y, "bootstrap", B = 1000)
## Load libraries and set working directory
library(devtools)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
# Help functions
?mle()
?logLik()
?standardError()
## Load libraries and set working directory
library(devtools)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "basic")
?estimatePois()
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
.mle <- mle(y)
mle(y)
.mle <- mle(y)
.mle
.ll <- logLik(y, lambda = .mle)
.ll
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
?standardError()
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
length(my_mle)
length(my_mle) != 1
MLE <- mle(y)
LL <- logLik(y, lambda = MLE)
SE <- standardError(y, SEtype, B)
SE <- standardError(y, SEtype, B)
MLE <- mle(y)
LL <- logLik(y, lambda = MLE)
Poisson_MLE <- new("PoisMLE",
y = y,
MLE = MLE,
LL = LL,
SE = SE,
SEtype = SEtype)
estimatePois(y, SEtype = "basic")
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
set.seed(666)
y <- rpois(1000, 10)
estimatePois(y, "basic")
estimatePois(y, "bootstrap")
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
abc <- estimatePois(y, "basic")
View(abc)
abc$y
abc
abc[1]
abc[[1]]
abc@MLE
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
## Load libraries and set working directory
library(devtools)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
# Help functions
?mle()
?logLik()
?standardError()
?estimatePois()
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/jorda/OneDrive/2022 Spring/POLS 5265 - Applied Statistical Programming/Class [Git]/AppliedStatisticalProgramming2022_FromHome/Exam")
# Verifying the package
current.code <- as.package("easyPoisJDW")
load_all(current.code)
document(current.code)
check(current.code)
# Some testing
set.seed(666)
y <- rpois(1000, 10)
my_mle <- mle(y)
myLL <- logLik(y, lambda = my_mle)
mySE_basic <- standardError(y, "basic")
mySE_boot <- standardError(y, "bootstrap", B = 1000)
estimatePois(y, SEtype = "basic")
estimatePois(y, SEtype = "bootstrap", B = 1000)
# Help functions
?mle()
?logLik()
?standardError()
?estimatePois()
