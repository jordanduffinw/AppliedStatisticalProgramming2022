knitr::opts_chunk$set(echo = TRUE)
# 400k rows, 150 columns
data <- as.data.frame(
matrix(rnorm(4e5*150, mean=5),
ncol=150))
normCols <- function(d){
# Get column means
means <- apply(d,2,mean)
# De-mean each column
for (i in seq_along(means)){
d[,i] <- d[,i] - means[i]
}
}
# Get column means
means <- apply(d,2,mean)
# 400k rows, 150 columns
data <- as.data.frame(
matrix(rnorm(4e5*150, mean=5),
ncol=150))
normCols <- function(d){
# Get column means
means <- apply(d,2,mean)
# De-mean each column
for (i in seq_along(means)){
d[,i] <- d[,i] - means[i]
}
}
data_demeaned <- normCols(data)
# system.time isn't very informative
system.time({
normCols <- function(d){
# Get column means
means <- apply(d,2,mean)
# De-mean each column
for (i in seq_along(means)){
d[,i] <- d[,i] - means[i]
}
}
data_demeaned <- normCols(data)
})
install.packages("profvis")
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
profvis({
normCols <- function(d){
# Get column means
means <- apply(d,2,mean)
# De-mean each column
for (i in seq_along(means)){
d[,i] <- d[,i] - means[i]
}
}
normCols(data)
})
# Four ways to get column means
profvis({
means <- apply(data, 2, mean)
means <- colMeans(data)
means <- lapply(data, mean)
means <- vapply(data, mean, numeric(1))
})
# Profile using vapply instead
profvis({
means <- vapply(data, mean, numeric(1))
for (i in seq_along(means)){
data[,i] <- data[,i] - means[i]
}
})
# Four ways to get column means
profvis({
means <- apply(data, 2, mean)
means <- colMeans(data)
means <- lapply(data, mean)
means <- vapply(data, mean, numeric(1))
})
gramschmidt <- function(x) {
x <- as.matrix(x)
n <- ncol(x)
m <- nrow(x)
q <- matrix(0, m, n)
r <- matrix(0, n, n)
for (j in 1:n) {
v = x[,j]
if (j > 1) {
for (i in 1:(j-1)) {
r[i,j] <- t(q[,i]) %*% x[,j]
v <- v - r[i,j] * q[,i]
}}
r[j,j] <- sqrt(sum(v^2))
q[,j] <- v / r[j,j]
}
return(list('Q'=q, 'R'=r)) }
profvis({
set.seed(1234)
n <- 1000
M <- matrix(rnorm(n*n, mean=5), ncol=n)
QR <- gramschmidt(M)
})
profvis({
n <- 1000
M <- matrix(rnorm(n**2, mean=5), ncol=n)
m <- nrow(M)
q <- matrix(0, m, n)
r <- matrix(0, n, n)
for (j in 1:n) {
v = M[,j]
if (j > 1) {
for (i in 1:(j-1)) {
r[i,j] <- t(q[,i]) %*% M[,j]
v <- v - r[i,j] * q[,i]
}}
r[j,j] <- sqrt(sum(v^2))
q[,j] <- v / r[j,j]
} })
### data.table
install.packages("data.table")
### data.table
install.packages("data.table")
library(data.table)
input <- if (file.exists("flights14.csv")) {
"flights14.csv"
} else {
"https://raw.githubusercontent.com
/Rdatatable/data.table/master/vignettes/
flights14.csv"
}
flights <- fread(input)
flights
dim(flights)
ans1 <- flights[origin == "JFK" & month == 6L]
head(ans1)
input <- if (file.exists("flights14.csv")) {
"flights14.csv"
} else {
"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv"
}
flights <- fread(input)
flights <- fread(input)
flights
dim(flights)
ans1 <- flights[origin == "JFK" & month == 6L]
head(ans1)
ans2 <- flights[1:2]
ans2
ans3 <- flights[order(origin, -dest)]
head(ans3)
# Advanced computations
# How many trips have had total delay < 0?
ans4 <- flights[,sum((arr_delay + dep_delay) < 0)]
ans4
# Calculate the average arrival and
# departure delay for all flights with “JFK”
# as the origin airport in the month of June.
ans5 <- flights[origin == "JFK" & month == 6L,
.(m_arr = mean(arr_delay),
m_dep = mean(dep_delay))]
ans5
View(ans1)
