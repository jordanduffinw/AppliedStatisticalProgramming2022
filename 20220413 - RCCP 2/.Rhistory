knitr::opts_chunk$set(echo = TRUE)
## Logic:
### Step 1: Set up the loop for iterating the calculation of weights (length iter).
###         Go to the first iteration where the initial weights are defined.
###         Set up an empty zsk matrix to store values of zsk.
### Step 2: Set up the loop for y values (length n), Take in the first value of y of length n, say y1.
###         Set up an empty numerator vector to store values of numerators (the second equation).
### Step 3: Set up the loop for ftk values (length m).
###         Place y1 to the ftk loop to calculate each numerator associated with each ftk.
###         Store the calculated numerator to the vector named num_vec.
### Step 4: num_vec / sum(num_vec) returns a ztk vector of length m. Save this vector to the row of the empty zsk matrix.
### Step 5: Go back to Step 2 and take the next value of y. Repeat this process for all y values.
### Step 6, Now we have a zsk matrix.
###         Each row of the matrix stores the ztk values corresponding to each y value (hence, aross all ftk values).
###         Each column of the matrix stores the ztk values corresponding to each ftk values (hence, across all y values).
### Step 7: colMeans(zsk_mat) returns the new weight for each ftk.
### Step 8: Feed the new weights to the next iteration. That means we go back to Step 1.
### Step 9: Go through all the iterations and the final weights will be calculated.
est_weights <- function(y, ftk, weights=rep(1/length(ftk),length(ftk)), sd=1, iter=20) {
n <- length(y)
m <- length(ftk)
for (k in 1:iter) {
zsk_mat <- matrix(nrow = n, ncol = m)
for (i in 1:n) {
num_vec <- c()
for (j in 1:m) {
num <- dnorm(y[i],ftk[j],sd) * weights[j]
num_vec <- append(num_vec,num)
}
den <- sum(num_vec)
ztk <- num_vec / den
zsk_mat[i,] <- ztk
}
weights <- colMeans(zsk_mat)
}
return(weights)
}
y <- c(0.2,0.5)
ftk <- seq(0,1,0.001)
sd <- 1
weights <- rep(1/length(ftk), length(ftk))
est_weights(y=y, ftk=ftk)
sum(est_weights(y=y, ftk=ftk))
